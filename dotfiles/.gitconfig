# https://git-scm.com/docs/git-config

[core]
	autocrlf = input
	eol = lf
	fsync = true
	ignorecase = false
	preloadindex = true
	quotepath = true
	editor = nvim -f
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[alias]
	# View the SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph
	# View the current working tree status using the short format
	s = status -s
	# Diff
	d = diff --patch-with-stat
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !"git add -A && git commit -av"
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Undo a `git push`
	undopush = push -f origin HEAD^:master
	# reset commit date
	rd = commit --amend --reset-author
	# reset by switching to master, pulling and deleting merged
	rl = !"f() { git co $1;git p;git dm; }; f"
	# force push
	ftp = push --force
	# rebase o/m
	rb = !"rb() { git rebase origin/$1; }; rb"
	# add and amend
	aa = !"git add . && git commit --amend --reuse-message=HEAD"
	# another view
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	# Just symink co for checking out branches
	co = checkout
	# commit current changes and reset HARD...
	wipe = !"git add -A && git commit -nqm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull --recurse-submodules --prune --rebase"
	# Show verbose output about tags, branches or remotes
	tags = tag -lq
	branches = branch -a
	remotes = remote -v
	# List aliases
	aliases = config --get-regexp alias
	# Credit an author on the latest commit
	credit = !"f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	rbi = !"r() { git rebase -i HEAD~$1; }; r"
	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = !"git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	addremove = add -A :/
	amend = commit --amend
	ci = commit
	cim = !"git add -A :/ && git commit -m"
	co = checkout
	df = diff --patience -M -C
	reporoot = rev-parse --show-toplevel
	save = !"git addremove && git ci -am 'work-in-progress'"
	st = status
	tidy = !"git clean -fdX && find $(git rev-parse --show-toplevel) -type d -empty | grep -v '.git' | xargs rm -rfv"
	undo = reset HEAD~1 --mixed
	w = whatchanged

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
	branch = auto
	diff = auto
	grep = auto
	interactive = auto
	showbranch = auto
	status = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = green
	changed = yellow
	untracked = cyan

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

# Use `origin` as the default remote on the `main` branch in all cases
[branch "main"]
	remote = origin
	merge = refs/heads/main

[fetch]
	recurseSubmodules = true

[gc]
	pruneexpire = now

[tar]
	umask = user

[transfer]
	fsckObjects = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process

[user]
	name = Shawn Petros
	email = shawn.petros@gmail.com

[credential]
	# username = srp037

[pull]
	rebase = false

[commit]
	template = ~/.stCommitMsg

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"
